# Darkroom的编译流程
Darkroom程序->IR（stencil操作的DAG -> DAG上做一些优化 -> 产生偏移 -> 优化偏移 -> 后端 -> terra编译产生底层CPU代码（包括向量、线程）-> LLVM编译优化

![](compile.png)

事实上，这是比较典型的嵌入在terra中的新语言的构造方法。利用im作为entry point，基于terra程序，一旦发现entry point，就将控制权交给新语言，直到遇到标志结束的其他关键词。

# Schedule

shift 对应偏移

```
function schedule(graph)
  assert(darkroom.kernelGraph.isKernelGraph(graph))

  local shifts = {}
  graph:S("*"):traverse(
    function(node) 
      if node.kernel~=nil then 
        shifts[node] = 0
        for k,v in node:inputs() do
          -- 对该结点每一个输入，找到该输入最晚的引用，再加上该输入目前的偏移，就是该结点的偏移
          -- 比如，对LatN，Rel1最晚的引用是x+1，而Rel的计算本身比Lat晚1,假设偏移为1,
          -- 则LatN偏移为2
          local s = node:maxUse(v) + shifts[v]
          if s > shifts[node] then shifts[node] = s end
        end
      end 
    end)

  return shifts
end

```    
![](shift.png)


line buffer事实上还是用正常的分配内存的函数。

# CPU架构上的特点
增加局部性

确保Line buffer在高速缓存寄存器中。

尽量减少内循环（也就是在一行内的循环）中的规约变量。

